module Data.Rhythm.Binary where

import Control.Monad (guard)
import Data.List (elemIndices, unfoldr)
import Data.List.Extra (splitOn)
import Data.Map ((!))
import qualified Data.Map as M

-- | Convert a binary string to a list of intervals.
--
-- >>> binaryToIntervals "1010010001001000"
-- [2,3,4,3,4]
binaryToIntervals :: String -> [Int]
binaryToIntervals =
  map (succ . length) . tail . splitOn "1"

-- | Convert a list of intervals to a binary string.
--
-- >>> intervalsToBinary [2,3,4,3,4]
-- "1010010001001000"
intervalsToBinary :: [Int] -> String
intervalsToBinary =
  concatMap (('1' :) . (`replicate` '0') . pred)

-- | All binary necklaces of a given length.
--
-- >>> necklaces 4
-- [[0,0,0,0],[1,0,0,0],[1,1,0,0],[1,0,1,0],[1,1,1,0],[1,1,1,1]]
necklaces :: (Ord a, Num a) => Int -> [[a]]
necklaces n =
  map (reverse . take n . cycle) $ lyndonWords [0, 1] n

-- Modified from
-- https://rosettacode.org/wiki/De_Bruijn_sequences#Permutation-based

-- the set of Lyndon words generated by inverse Burrows-Wheeler transform
lyndonWords :: (Ord a) => [a] -> Int -> [[a]]
lyndonWords s n = map (ref !!) <$> cycleForm perm
  where
    ref = take (length s ^ n) (cycle s)
    perm = s >>= (`elemIndices` ref)

-- represents a permutation in a cycle notation
cycleForm :: [Int] -> [[Int]]
cycleForm = unfoldr getCycle . M.fromList . zip [0 ..]
  where
    getCycle p =
      do
        guard (not (M.null p))
        ((x, y), m) <- M.minViewWithKey p
        if x == y
          then pure ([x], m)
          else do
            let c = takeWhile (/= x) (iterate (m !) y)
            pure (c ++ [x], foldr M.delete m c)
